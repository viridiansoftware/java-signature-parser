buildscript {
    repositories {
    	mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
		classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0'
    }
}

if(project.hasProperty('ossrhUser') && project.hasProperty("release")) {
	apply plugin: "io.codearte.nexus-staging"

	nexusStaging {
		packageGroup = 'com.viridiansoftware'
		username = ossrhUser
		password = ossrhPassword
	}
}

ext {
	antlrVersion = '4.7.2'
	
	junitVersion="4.8.1"
	jmockVersion="2.5.1"
}

subprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    
    tasks.eclipse.doLast {
    		delete ".project"
	}
	
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url 'https://maven.google.com' }
	}
}

def mavenProjects() {
	subprojects.findAll { !it.name.contains('antlr') }
}

def projectVersion = '1.0.2';

configure(mavenProjects()) {
	apply plugin: "signing"
	apply plugin: "maven"
	apply plugin: "java"
	
	group = 'com.viridiansoftware'
	version = projectVersion
	
	apply plugin: "java"
		
	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'
		
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
		
	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	tasks.withType(Test) {
		systemProperty "file.encoding", "UTF-8"
	}
	
	artifacts {
		archives javadocJar, sourcesJar
	}
	
	if(project.hasProperty('ossrhUser')) {
		signing {
			sign configurations.archives
		}
		
		uploadArchives {
			repositories {
				mavenDeployer {
					// POM signature
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
					// Target repository
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: ossrhUser, password: ossrhPassword)
					}
					pom.project {
						name project.name
						description project.description
						packaging 'jar'
						url 'https://github.com/viridiansoftware/java-signature-parser'
	
						scm {
							connection 'scm:git:https://github.com/viridiansoftware/java-signature-parser.git'
							developerConnection 'scm:git:git@github.com:viridiansoftware/java-signature-parser.git'
							url 'https://github.com/viridiansoftware/java-signature-parser.git'
						}
	
						licenses {
							license {
								name 'Apache License 2.0'
								url 'https://opensource.org/licenses/Apache-2.0'
								distribution 'repo'
							}
						}
	
						developers {
							developer {
								id = 'tomcashman'
								name = 'Thomas Cashman'
								email = 'thomascashman404@gmail.com'
							}
						}
					}
				}
			}
		}
	}
}

project(":java-signature-antlr") {
	apply plugin: 'antlr'

	description = 'ANTLR4 grammar for Java Signatures'
	
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	dependencies {
		antlr "org.antlr:antlr4:$antlrVersion"
	}
	
	generateGrammarSource {
		arguments += ["-package", "com.viridiansoftware.java.signature.antlr"]
	}
}

project(":java-signature-parser-lib") {
    description = 'Library for parsing Java Signatures'
    
    task copyAntlrSourcesToProject(type: Copy, dependsOn: project(":java-signature-antlr").compileJava) {
		from "$projectDir/../java-signature-antlr/build/generated-src/antlr/main/"
		into "$projectDir/src/main/java/com/viridiansoftware/java/signature/antlr/"
	}
	
	dependencies {
		compile "org.antlr:antlr4-runtime:$antlrVersion"
		
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"	
	}

	if(!project.version.contains("SNAPSHOT")) {
		task docs(type: Javadoc) {
			failOnError = false
			title = 'gettext'
			source project.sourceSets.main.allJava
			classpath = project.sourceSets.main.compileClasspath
			destinationDir = rootProject.file("docs/javadoc/${projectVersion}")
		}
	}
	
	compileJava.dependsOn copyAntlrSourcesToProject
}

task wrapper(type: Wrapper) {
    gradleVersion = '5.2.1'
}
